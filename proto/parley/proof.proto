syntax = "proto3";

package parley.v1;

import "common.proto";

// === Zero-knowledge age proof artifacts ===

// Public inputs used by verifier (and revealed to the verifier only).
message PublicInputs {
  uint32 cutoff_days      = 1; // threshold in days since epoch (e.g., 18y)
  bytes  rp_challenge     = 2; // 32-byte binding to RP (origin+nonce hash)
  IssuerKeyHash issuer    = 3; // hash of issuer RJ pubkey used inside the circuit
  bytes  cred_nullifier   = 4; // 32 bytes: blake2s(NULL_V1_DST || C); server-only usage
}

// Groth16 proof blob with minimal metadata for routing/compatibility.
message AgeProof {
  uint32 verifying_key_id = 1; // server-side VK selector
  PublicInputs public     = 2; // assembled by the prover from the challenge
  bytes  proof            = 3; // Groth16 proof bytes
}

// Request from wallet to verifier containing the proof.
message VerifyRequest {
  AgeProof proof = 1;
}

// Response from verifier to RP / wallet.
message VerifyResponse {
  enum Result {
    RESULT_UNSPECIFIED = 0;
    OK                 = 1;
    INVALID_PROOF      = 2;
    EXPIRED_CHALLENGE  = 3;
    POLICY_REJECTED    = 4; // e.g., issuer not in JWKS/allowed set
  }
  Result result = 1;
  // Echo the issuer hash for accounting (server-side use; do not forward to RP if not needed).
  IssuerKeyHash issuer = 2;
}